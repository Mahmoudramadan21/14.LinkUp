
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.6.0
 * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
 */
Prisma.prismaVersion = {
  client: "6.6.0",
  engine: "f676762280b54cd07c770017ed3711ddde35f37a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  userId: 'userId',
  details: 'details',
  createdAt: 'createdAt'
};

exports.Prisma.UserScalarFieldEnum = {
  UserID: 'UserID',
  Username: 'Username',
  Email: 'Email',
  Password: 'Password',
  ProfilePicture: 'ProfilePicture',
  Bio: 'Bio',
  IsPrivate: 'IsPrivate',
  Role: 'Role',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt',
  resetToken: 'resetToken',
  resetTokenExpiry: 'resetTokenExpiry',
  lastActive: 'lastActive'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  isGroup: 'isGroup',
  adminId: 'adminId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  senderId: 'senderId',
  conversationId: 'conversationId',
  readAt: 'readAt',
  replyToId: 'replyToId',
  createdAt: 'createdAt'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  url: 'url',
  type: 'type',
  messageId: 'messageId',
  fileName: 'fileName',
  fileSize: 'fileSize'
};

exports.Prisma.ReactionScalarFieldEnum = {
  id: 'id',
  emoji: 'emoji',
  messageId: 'messageId',
  userId: 'userId'
};

exports.Prisma.RateLimitingScalarFieldEnum = {
  key: 'key',
  points: 'points',
  expire: 'expire'
};

exports.Prisma.PostScalarFieldEnum = {
  PostID: 'PostID',
  UserID: 'UserID',
  Content: 'Content',
  ImageURL: 'ImageURL',
  VideoURL: 'VideoURL',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt',
  privacy: 'privacy'
};

exports.Prisma.StoryScalarFieldEnum = {
  StoryID: 'StoryID',
  UserID: 'UserID',
  MediaURL: 'MediaURL',
  CreatedAt: 'CreatedAt',
  ExpiresAt: 'ExpiresAt'
};

exports.Prisma.HighlightScalarFieldEnum = {
  HighlightID: 'HighlightID',
  UserID: 'UserID',
  Title: 'Title',
  CoverImage: 'CoverImage',
  CreatedAt: 'CreatedAt'
};

exports.Prisma.SavedPostScalarFieldEnum = {
  SavedPostID: 'SavedPostID',
  UserID: 'UserID',
  PostID: 'PostID',
  CreatedAt: 'CreatedAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  CommentID: 'CommentID',
  PostID: 'PostID',
  UserID: 'UserID',
  Content: 'Content',
  CreatedAt: 'CreatedAt'
};

exports.Prisma.LikeScalarFieldEnum = {
  LikeID: 'LikeID',
  PostID: 'PostID',
  UserID: 'UserID',
  CreatedAt: 'CreatedAt'
};

exports.Prisma.FollowerScalarFieldEnum = {
  FollowerID: 'FollowerID',
  UserID: 'UserID',
  FollowerUserID: 'FollowerUserID',
  Status: 'Status',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  NotificationID: 'NotificationID',
  UserID: 'UserID',
  Type: 'Type',
  Content: 'Content',
  IsRead: 'IsRead',
  Metadata: 'Metadata',
  CreatedAt: 'CreatedAt'
};

exports.Prisma.ReportScalarFieldEnum = {
  ReportID: 'ReportID',
  PostID: 'PostID',
  UserID: 'UserID',
  Reason: 'Reason',
  CreatedAt: 'CreatedAt'
};

exports.Prisma.SupportRequestScalarFieldEnum = {
  RequestID: 'RequestID',
  UserID: 'UserID',
  Subject: 'Subject',
  Content: 'Content',
  CreatedAt: 'CreatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.PostPrivacy = exports.$Enums.PostPrivacy = {
  PUBLIC: 'PUBLIC',
  FOLLOWERS_ONLY: 'FOLLOWERS_ONLY',
  PRIVATE: 'PRIVATE'
};

exports.FollowStatus = exports.$Enums.FollowStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  FOLLOW_REQUEST: 'FOLLOW_REQUEST',
  FOLLOW_ACCEPTED: 'FOLLOW_ACCEPTED',
  FOLLOW: 'FOLLOW',
  LIKE: 'LIKE',
  COMMENT: 'COMMENT',
  MESSAGE: 'MESSAGE'
};

exports.Prisma.ModelName = {
  AuditLog: 'AuditLog',
  User: 'User',
  Conversation: 'Conversation',
  Message: 'Message',
  Attachment: 'Attachment',
  Reaction: 'Reaction',
  RateLimiting: 'RateLimiting',
  Post: 'Post',
  Story: 'Story',
  Highlight: 'Highlight',
  SavedPost: 'SavedPost',
  Comment: 'Comment',
  Like: 'Like',
  Follower: 'Follower',
  Notification: 'Notification',
  Report: 'Report',
  SupportRequest: 'SupportRequest'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
