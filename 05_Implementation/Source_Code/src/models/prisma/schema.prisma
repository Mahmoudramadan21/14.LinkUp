datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum FollowStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum NotificationType {
  FOLLOW_REQUEST
  FOLLOW_ACCEPTED
  FOLLOW
  LIKE
  COMMENT
  MESSAGE
}

model User {
  UserID           Int              @id @default(autoincrement())
  Username         String           @unique
  Email            String           @unique
  Password         String
  ProfilePicture   String?
  Bio              String?
  IsPrivate        Boolean          @default(false)
  Role             Role             @default(USER)
  CreatedAt        DateTime         @default(now())
  UpdatedAt        DateTime         @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?
  Posts            Post[]
  Stories          Story[]
  Comments         Comment[]
  Likes            Like[]
  MessagesSent     Message[]        @relation("SentMessages")
  MessagesReceived Message[]        @relation("ReceivedMessages")
  Followers        Follower[]       @relation("Followers")
  Following        Follower[]       @relation("Following")
  Notifications    Notification[]
  Reports          Report[]
  SupportRequests  SupportRequest[]
  SavedPosts       SavedPost[]
  Highlights       Highlight[]
}

model RateLimiting {
  key    String @id
  points Int
  expire Int?
}


model Post {
  PostID     Int         @id @default(autoincrement())
  UserID     Int
  User       User        @relation(fields: [UserID], references: [UserID])
  Content    String
  ImageURL   String?
  VideoURL   String?
  CreatedAt  DateTime    @default(now())
  UpdatedAt  DateTime    @updatedAt
  Comments   Comment[]
  Likes      Like[]
  Reports    Report[]
  SavedPosts SavedPost[]
}

model Story {
  StoryID    Int         @id @default(autoincrement())
  UserID     Int
  User       User        @relation(fields: [UserID], references: [UserID])
  MediaURL   String
  CreatedAt  DateTime    @default(now())
  ExpiresAt  DateTime
  Highlights Highlight[] @relation("StoryToHighlights")
}

model Highlight {
  HighlightID Int      @id @default(autoincrement())
  UserID      Int
  User        User     @relation(fields: [UserID], references: [UserID])
  Title       String   @db.VarChar(50)
  CoverImage  String
  CreatedAt   DateTime @default(now())
  Stories     Story[]  @relation("StoryToHighlights")

  @@index([UserID])
  @@index([CreatedAt])
}

model SavedPost {
  SavedPostID Int      @id @default(autoincrement())
  UserID      Int
  User        User     @relation(fields: [UserID], references: [UserID])
  PostID      Int
  Post        Post     @relation(fields: [PostID], references: [PostID])
  CreatedAt   DateTime @default(now())
}

model Comment {
  CommentID Int      @id @default(autoincrement())
  PostID    Int
  Post      Post     @relation(fields: [PostID], references: [PostID])
  UserID    Int
  User      User     @relation(fields: [UserID], references: [UserID])
  Content   String
  CreatedAt DateTime @default(now())
}

model Like {
  LikeID    Int      @id @default(autoincrement())
  PostID    Int
  Post      Post     @relation(fields: [PostID], references: [PostID])
  UserID    Int
  User      User     @relation(fields: [UserID], references: [UserID])
  CreatedAt DateTime @default(now())
}

model Message {
  MessageID  Int      @id @default(autoincrement())
  SenderID   Int
  Sender     User     @relation("SentMessages", fields: [SenderID], references: [UserID])
  ReceiverID Int
  Receiver   User     @relation("ReceivedMessages", fields: [ReceiverID], references: [UserID])
  Content    String
  IsRead     Boolean  @default(false)
  CreatedAt  DateTime @default(now())
}

model Follower {
  FollowerID Int @id @default(autoincrement())
  UserID     Int
  User       User @relation("Followers", fields: [UserID], references: [UserID])
  FollowerUserID Int
  FollowerUser User @relation("Following", fields: [FollowerUserID], references: [UserID])
  Status     FollowStatus @default(PENDING)
  CreatedAt  DateTime @default(now())
  UpdatedAt  DateTime @updatedAt
}

model Notification {
  NotificationID Int              @id @default(autoincrement())
  UserID         Int
  User           User             @relation(fields: [UserID], references: [UserID])
  Type           NotificationType
  Content        String
  IsRead         Boolean          @default(false)
  Metadata       Json?
  CreatedAt      DateTime         @default(now())
}

model Report {
  ReportID  Int      @id @default(autoincrement())
  PostID    Int
  Post      Post     @relation(fields: [PostID], references: [PostID])
  UserID    Int
  User      User     @relation(fields: [UserID], references: [UserID])
  Reason    String
  CreatedAt DateTime @default(now())
}

model SupportRequest {
  RequestID Int      @id @default(autoincrement())
  UserID    Int
  User      User     @relation(fields: [UserID], references: [UserID])
  Subject   String
  Content   String
  CreatedAt DateTime @default(now())
}
